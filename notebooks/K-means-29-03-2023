{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5c19a980",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-29T14:46:05.131601Z",
     "start_time": "2023-03-29T14:45:52.601751Z"
    },
    "execution": {
     "iopub.execute_input": "2023-03-29T17:17:19.107920Z",
     "iopub.status.busy": "2023-03-29T17:17:19.107497Z",
     "iopub.status.idle": "2023-03-29T17:17:20.183082Z",
     "shell.execute_reply": "2023-03-29T17:17:20.181846Z"
    },
    "papermill": {
     "duration": 1.087298,
     "end_time": "2023-03-29T17:17:20.185894",
     "exception": false,
     "start_time": "2023-03-29T17:17:19.098596",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import RobustScaler\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.metrics import silhouette_score\n",
    "import pickle"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea9bd018",
   "metadata": {
    "papermill": {
     "duration": 0.005506,
     "end_time": "2023-03-29T17:17:20.197684",
     "exception": false,
     "start_time": "2023-03-29T17:17:20.192178",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7c5b467d",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-29T15:00:39.330318Z",
     "start_time": "2023-03-29T15:00:35.883794Z"
    },
    "execution": {
     "iopub.execute_input": "2023-03-29T17:17:20.210745Z",
     "iopub.status.busy": "2023-03-29T17:17:20.210233Z",
     "iopub.status.idle": "2023-03-29T17:17:20.711436Z",
     "shell.execute_reply": "2023-03-29T17:17:20.710449Z"
    },
    "papermill": {
     "duration": 0.510793,
     "end_time": "2023-03-29T17:17:20.713884",
     "exception": false,
     "start_time": "2023-03-29T17:17:20.203091",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "full_data = pd.read_parquet('../data/full_data.parquet.gzip') "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcffe452",
   "metadata": {
    "papermill": {
     "duration": 0.005449,
     "end_time": "2023-03-29T17:17:20.725393",
     "exception": false,
     "start_time": "2023-03-29T17:17:20.719944",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Cleaning "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "663ca89f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-29T14:48:12.691536Z",
     "start_time": "2023-03-29T14:48:11.764000Z"
    },
    "execution": {
     "iopub.execute_input": "2023-03-29T17:17:20.738287Z",
     "iopub.status.busy": "2023-03-29T17:17:20.737921Z",
     "iopub.status.idle": "2023-03-29T17:17:20.742951Z",
     "shell.execute_reply": "2023-03-29T17:17:20.741774Z"
    },
    "papermill": {
     "duration": 0.014179,
     "end_time": "2023-03-29T17:17:20.745128",
     "exception": false,
     "start_time": "2023-03-29T17:17:20.730949",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #### Drop columns\n",
    "# # Nan's columns\n",
    "# data = data.drop(['CAN Vehicle Speed (km/h)' ,'Unnamed: 0', 'Engine RPM (rpm)', 'Fuel Rate CAN (l/h)', 'Program Number', 'Tachograph Total Vehicle Distance (m)', 'Fuel Consumed (counted) (l)','Green Driving Type','Green Driving Value',\n",
    "# 'Tachograph Vehicle Speed (km/h)', 'Placa','Engine Worktime (counted) (h)', 'High Resolution Engine Total Fuel Used  (l)', 'Nominal Friction - Percent Torque - Manual CAN (%)','Clutch Switch','Engine Total Fuel Used (l)'], axis = 1)\n",
    "\n",
    "# # High correlation columns\n",
    "# data = data.drop(['Engine Current Load (%)','IMSI','moda_movel','Actual Engine - Percent Torque - Manual CAN (%)', 'Wheel Based Speed (km/h)',\n",
    "# 'Speed (km/h)'], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a8c5474",
   "metadata": {
    "papermill": {
     "duration": 0.005585,
     "end_time": "2023-03-29T17:17:20.756339",
     "exception": false,
     "start_time": "2023-03-29T17:17:20.750754",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Fill Nan's"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "15198ecd",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-29T14:48:15.783954Z",
     "start_time": "2023-03-29T14:48:14.793713Z"
    },
    "execution": {
     "iopub.execute_input": "2023-03-29T17:17:20.769329Z",
     "iopub.status.busy": "2023-03-29T17:17:20.768968Z",
     "iopub.status.idle": "2023-03-29T17:17:20.773590Z",
     "shell.execute_reply": "2023-03-29T17:17:20.772405Z"
    },
    "papermill": {
     "duration": 0.014058,
     "end_time": "2023-03-29T17:17:20.775922",
     "exception": false,
     "start_time": "2023-03-29T17:17:20.761864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# data['Engine Total Hours Of Operation (h)'] = data['Engine Total Hours Of Operation (h)'].fillna(data['Engine Total Hours Of Operation (h)'].mean())\n",
    "# data = data.fillna(method = 'ffill')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c214c5c",
   "metadata": {
    "papermill": {
     "duration": 0.00563,
     "end_time": "2023-03-29T17:17:20.787189",
     "exception": false,
     "start_time": "2023-03-29T17:17:20.781559",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Filtering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "43382f58",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-29T14:48:17.214187Z",
     "start_time": "2023-03-29T14:48:16.970093Z"
    },
    "execution": {
     "iopub.execute_input": "2023-03-29T17:17:20.800175Z",
     "iopub.status.busy": "2023-03-29T17:17:20.799814Z",
     "iopub.status.idle": "2023-03-29T17:17:20.805021Z",
     "shell.execute_reply": "2023-03-29T17:17:20.803729Z"
    },
    "papermill": {
     "duration": 0.014634,
     "end_time": "2023-03-29T17:17:20.807320",
     "exception": false,
     "start_time": "2023-03-29T17:17:20.792686",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# data = data.drop(['Data','Hora'], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f715c347",
   "metadata": {
    "papermill": {
     "duration": 0.005627,
     "end_time": "2023-03-29T17:17:20.818602",
     "exception": false,
     "start_time": "2023-03-29T17:17:20.812975",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "730fb5c0",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-29T14:48:20.986145Z",
     "start_time": "2023-03-29T14:48:18.641455Z"
    },
    "execution": {
     "iopub.execute_input": "2023-03-29T17:17:20.833545Z",
     "iopub.status.busy": "2023-03-29T17:17:20.832804Z",
     "iopub.status.idle": "2023-03-29T17:17:20.837675Z",
     "shell.execute_reply": "2023-03-29T17:17:20.836926Z"
    },
    "papermill": {
     "duration": 0.015426,
     "end_time": "2023-03-29T17:17:20.839910",
     "exception": false,
     "start_time": "2023-03-29T17:17:20.824484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # One hot encoding\n",
    "# rs = RobustScaler()\n",
    "# encoded_data = rs.fit_transform(data[['Acceleration Pedal Position (%)', 'Active GSM Operator',\n",
    "#                                        'Altitude (m)', 'Axis X (mG)', 'Axis Y (mG)', 'Axis Z (mG)',\n",
    "#                                        'Battery Current (A)', 'Battery Voltage (mV)', 'Latitude', 'Longitude',\n",
    "#                                        'Engine Coolant Temperature (°C)', 'Engine Speed (rpm)',\n",
    "#                                        'Engine Total Hours Of Operation (h)', 'External Voltage (V)',\n",
    "#                                        'Fuel Rate (l/h)', 'Instantaneous Fuel Economy (km/l)', 'Odometer (m)',\n",
    "#                                        'Total Odometer (m)', 'Transmission Current Gear',\n",
    "#                                        'Vehicle Speed - Tachograph (km/h)', 'diff', 'subida_descida']])\n",
    "\n",
    "# encoded_data = pd.DataFrame(encoded_data)\n",
    "# encoded_data.columns = ['Acceleration Pedal Position (%)', 'Active GSM Operator',\n",
    "#                                        'Altitude (m)', 'Axis X (mG)', 'Axis Y (mG)', 'Axis Z (mG)',\n",
    "#                                        'Battery Current (A)', 'Battery Voltage (mV)', 'Latitude', 'Longitude',\n",
    "#                                        'Engine Coolant Temperature (°C)', 'Engine Speed (rpm)',\n",
    "#                                        'Engine Total Hours Of Operation (h)', 'External Voltage (V)',\n",
    "#                                        'Fuel Rate (l/h)', 'Instantaneous Fuel Economy (km/l)', 'Odometer (m)',\n",
    "#                                        'Total Odometer (m)', 'Transmission Current Gear',\n",
    "#                                        'Vehicle Speed - Tachograph (km/h)', 'diff', 'subida_descida']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "49846c7f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-29T14:48:23.310492Z",
     "start_time": "2023-03-29T14:48:23.120911Z"
    },
    "execution": {
     "iopub.execute_input": "2023-03-29T17:17:20.853578Z",
     "iopub.status.busy": "2023-03-29T17:17:20.852829Z",
     "iopub.status.idle": "2023-03-29T17:17:20.856640Z",
     "shell.execute_reply": "2023-03-29T17:17:20.855964Z"
    },
    "papermill": {
     "duration": 0.013184,
     "end_time": "2023-03-29T17:17:20.858710",
     "exception": false,
     "start_time": "2023-03-29T17:17:20.845526",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# full_data = pd.concat([encoded_data, data[['Brake Switch','GSM Area Code','Ignition','Movement']]], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8435d3d6",
   "metadata": {
    "papermill": {
     "duration": 0.005738,
     "end_time": "2023-03-29T17:17:20.870110",
     "exception": false,
     "start_time": "2023-03-29T17:17:20.864372",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Machine Learning Modelling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97c20c40",
   "metadata": {
    "papermill": {
     "duration": 0.005569,
     "end_time": "2023-03-29T17:17:20.881304",
     "exception": false,
     "start_time": "2023-03-29T17:17:20.875735",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## K-Means"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c54221db",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-29T10:57:06.847931Z",
     "start_time": "2023-03-29T10:57:06.841024Z"
    },
    "execution": {
     "iopub.execute_input": "2023-03-29T17:17:20.895036Z",
     "iopub.status.busy": "2023-03-29T17:17:20.894230Z",
     "iopub.status.idle": "2023-03-29T17:17:20.898045Z",
     "shell.execute_reply": "2023-03-29T17:17:20.897287Z"
    },
    "papermill": {
     "duration": 0.013149,
     "end_time": "2023-03-29T17:17:20.900039",
     "exception": false,
     "start_time": "2023-03-29T17:17:20.886890",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ks = np.arange(2,31,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2df789b2",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-29T14:16:30.482435Z",
     "start_time": "2023-03-29T10:57:21.664030Z"
    },
    "execution": {
     "iopub.execute_input": "2023-03-29T17:17:20.913759Z",
     "iopub.status.busy": "2023-03-29T17:17:20.913060Z",
     "iopub.status.idle": "2023-03-29T17:17:20.916895Z",
     "shell.execute_reply": "2023-03-29T17:17:20.916188Z"
    },
    "papermill": {
     "duration": 0.013279,
     "end_time": "2023-03-29T17:17:20.918983",
     "exception": false,
     "start_time": "2023-03-29T17:17:20.905704",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# k_means_scores = []\n",
    "# for k in ks:\n",
    "#     # Define and fit model\n",
    "#     kmeans_model = KMeans(n_clusters = k, n_init=\"auto\").fit(full_data)\n",
    "    \n",
    "#     # Predict\n",
    "#     kmeans_labels = kmeans_model.predict(full_data)\n",
    "    \n",
    "#     # Model evaluation\n",
    "#     k_means_scores.append(silhouette_score(full_data, kmeans_labels))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "33ffa076",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-29T17:17:20.933356Z",
     "iopub.status.busy": "2023-03-29T17:17:20.932643Z",
     "iopub.status.idle": "2023-03-29T17:17:20.936581Z",
     "shell.execute_reply": "2023-03-29T17:17:20.935751Z"
    },
    "papermill": {
     "duration": 0.013516,
     "end_time": "2023-03-29T17:17:20.938649",
     "exception": false,
     "start_time": "2023-03-29T17:17:20.925133",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# print(k_means_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a88ca2cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-29T17:17:20.952738Z",
     "iopub.status.busy": "2023-03-29T17:17:20.952030Z",
     "iopub.status.idle": "2023-03-29T17:17:20.956226Z",
     "shell.execute_reply": "2023-03-29T17:17:20.955081Z"
    },
    "papermill": {
     "duration": 0.013996,
     "end_time": "2023-03-29T17:17:20.958489",
     "exception": false,
     "start_time": "2023-03-29T17:17:20.944493",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# pickle.dump(k_means_scores, open('../data/k_means_scores.pkl','wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8dc95285",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-29T17:04:47.276826Z",
     "start_time": "2023-03-29T17:04:28.640588Z"
    },
    "execution": {
     "iopub.execute_input": "2023-03-29T17:17:20.973145Z",
     "iopub.status.busy": "2023-03-29T17:17:20.972722Z",
     "iopub.status.idle": "2023-03-29T17:17:22.123119Z",
     "shell.execute_reply": "2023-03-29T17:17:22.121614Z"
    },
    "papermill": {
     "duration": 0.176648,
     "end_time": "2023-03-29T17:17:21.141171",
     "exception": false,
     "start_time": "2023-03-29T17:17:20.964523",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[12], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Define and fit model\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m kmeans_model \u001b[38;5;241m=\u001b[39m \u001b[43mKMeans\u001b[49m\u001b[43m(\u001b[49m\u001b[43mn_clusters\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m7\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_init\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mauto\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfull_data\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      3\u001b[0m kmeans_labels \u001b[38;5;241m=\u001b[39m kmeans_model\u001b[38;5;241m.\u001b[39mpredict(full_data)\n\u001b[1;32m      4\u001b[0m pickle\u001b[38;5;241m.\u001b[39mdump(kmeans_labels, \u001b[38;5;28mopen\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m../data/k_means_scores.pkl\u001b[39m\u001b[38;5;124m'\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mwb\u001b[39m\u001b[38;5;124m'\u001b[39m))\n",
      "File \u001b[0;32m~/.pyenv/versions/3.9.13/envs/driveon/lib/python3.9/site-packages/sklearn/cluster/_kmeans.py:1417\u001b[0m, in \u001b[0;36mKMeans.fit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m   1390\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Compute k-means clustering.\u001b[39;00m\n\u001b[1;32m   1391\u001b[0m \n\u001b[1;32m   1392\u001b[0m \u001b[38;5;124;03mParameters\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1413\u001b[0m \u001b[38;5;124;03m    Fitted estimator.\u001b[39;00m\n\u001b[1;32m   1414\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   1415\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_params()\n\u001b[0;32m-> 1417\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_data\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1418\u001b[0m \u001b[43m    \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1419\u001b[0m \u001b[43m    \u001b[49m\u001b[43maccept_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcsr\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1420\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m[\u001b[49m\u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfloat64\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfloat32\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1421\u001b[0m \u001b[43m    \u001b[49m\u001b[43morder\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mC\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1422\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcopy_x\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1423\u001b[0m \u001b[43m    \u001b[49m\u001b[43maccept_large_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1424\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1426\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_params_vs_input(X)\n\u001b[1;32m   1428\u001b[0m random_state \u001b[38;5;241m=\u001b[39m check_random_state(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mrandom_state)\n",
      "File \u001b[0;32m~/.pyenv/versions/3.9.13/envs/driveon/lib/python3.9/site-packages/sklearn/base.py:565\u001b[0m, in \u001b[0;36mBaseEstimator._validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    563\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mValidation should be done on X, y or both.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m no_val_X \u001b[38;5;129;01mand\u001b[39;00m no_val_y:\n\u001b[0;32m--> 565\u001b[0m     X \u001b[38;5;241m=\u001b[39m \u001b[43mcheck_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minput_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mX\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mcheck_params\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    566\u001b[0m     out \u001b[38;5;241m=\u001b[39m X\n\u001b[1;32m    567\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m no_val_X \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m no_val_y:\n",
      "File \u001b[0;32m~/.pyenv/versions/3.9.13/envs/driveon/lib/python3.9/site-packages/sklearn/utils/validation.py:879\u001b[0m, in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[1;32m    877\u001b[0m         array \u001b[38;5;241m=\u001b[39m xp\u001b[38;5;241m.\u001b[39mastype(array, dtype, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[1;32m    878\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 879\u001b[0m         array \u001b[38;5;241m=\u001b[39m \u001b[43m_asarray_with_order\u001b[49m\u001b[43m(\u001b[49m\u001b[43marray\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43morder\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43morder\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mxp\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mxp\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    880\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m ComplexWarning \u001b[38;5;28;01mas\u001b[39;00m complex_warning:\n\u001b[1;32m    881\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    882\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mComplex data not supported\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(array)\n\u001b[1;32m    883\u001b[0m     ) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcomplex_warning\u001b[39;00m\n",
      "File \u001b[0;32m~/.pyenv/versions/3.9.13/envs/driveon/lib/python3.9/site-packages/sklearn/utils/_array_api.py:185\u001b[0m, in \u001b[0;36m_asarray_with_order\u001b[0;34m(array, dtype, order, copy, xp)\u001b[0m\n\u001b[1;32m    182\u001b[0m     xp, _ \u001b[38;5;241m=\u001b[39m get_namespace(array)\n\u001b[1;32m    183\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m xp\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m \u001b[38;5;129;01min\u001b[39;00m {\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnumpy\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnumpy.array_api\u001b[39m\u001b[38;5;124m\"\u001b[39m}:\n\u001b[1;32m    184\u001b[0m     \u001b[38;5;66;03m# Use NumPy API to support order\u001b[39;00m\n\u001b[0;32m--> 185\u001b[0m     array \u001b[38;5;241m=\u001b[39m \u001b[43mnumpy\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43masarray\u001b[49m\u001b[43m(\u001b[49m\u001b[43marray\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43morder\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43morder\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    186\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m xp\u001b[38;5;241m.\u001b[39masarray(array, copy\u001b[38;5;241m=\u001b[39mcopy)\n\u001b[1;32m    187\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "# Define and fit model\n",
    "kmeans_model = KMeans(n_clusters = 7, n_init=\"auto\").fit(full_data)\n",
    "kmeans_labels = kmeans_model.predict(full_data)\n",
    "pickle.dump(kmeans_labels, open('../data/k_means_scores.pkl','wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff604c5a",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d810e331",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "752e5a30",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e1517e5",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e968094e",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "925d976f",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb0cddc4",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2baa314",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "43cc2ea1",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3120fdf2",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.1653,
   "end_time": "2023-03-29T17:17:22.668809",
   "environment_variables": {},
   "exception": null,
   "input_path": "K-Means.ipynb",
   "output_path": "K-means-29-03-2023",
   "parameters": {},
   "start_time": "2023-03-29T17:17:17.503509",
   "version": "2.4.0"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}